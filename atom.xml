<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Azero</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.azero-ng.cn/"/>
  <updated>2019-08-04T09:08:25.515Z</updated>
  <id>http://blog.azero-ng.cn/</id>
  
  <author>
    <name>Azero</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-协程篇1</title>
    <link href="http://blog.azero-ng.cn/python-%E5%8D%8F%E7%A8%8B%E7%AF%871.html"/>
    <id>http://blog.azero-ng.cn/python-协程篇1.html</id>
    <published>2019-08-04T09:04:07.000Z</published>
    <updated>2019-08-04T09:08:25.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-协程"><a href="#python-协程" class="headerlink" title="python 协程"></a>python 协程</h1><h2 id="协程运行"><a href="#协程运行" class="headerlink" title="协程运行"></a>协程运行</h2><p>asyncio.run()</p><p>await</p><p>asyncio.create_task()</p><h2 id="可等待对象"><a href="#可等待对象" class="headerlink" title="可等待对象"></a>可等待对象</h2><ol><li><strong>协程</strong><ol><li><em>协程函数</em>: 定义形式为 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-def" target="_blank" rel="noopener"><code>async def</code></a> 的函数;</li><li><em>协程对象</em>: 调用 <em>协程函数</em> 所返回的对象。</li></ol></li><li><strong>任务</strong> <ol><li>asyncio.create_task(coro):将 <em>coro</em> <a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html#coroutine" target="_blank" rel="noopener">协程</a> 打包为一个 <a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.Task" target="_blank" rel="noopener"><code>Task</code></a> 排入日程准备执行。返回 Task 对象。</li></ol></li><li><strong>Future</strong><ol><li><a href="https://docs.python.org/zh-cn/3/library/asyncio-future.html#asyncio.Future" target="_blank" rel="noopener"><code>Future</code></a> 是一种特殊的 <strong>低层级</strong> 可等待对象，表示一个异步操作的 <strong>最终结果</strong>。<ol><li><a href="https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor" target="_blank" rel="noopener"><code>loop.run_in_executor()</code></a>。</li></ol></li></ol></li></ol><h2 id="运行asyncio程序"><a href="#运行asyncio程序" class="headerlink" title="运行asyncio程序"></a>运行asyncio程序</h2><ol><li><p>asyncio.run(coro, *, debug=False):</p><p>同线程下,无eventloop,才能被调用,理想情况:作为主入口点,只被调用一次</p></li></ol><h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><p>asyncio.create_task(coro): 把协程对象包装成task对象</p><h2 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h2><p>coroutine asyncio.sleep(delay, result=None, *, loop=None)</p><p>loop即将废弃</p><h2 id="并行执行任务"><a href="#并行执行任务" class="headerlink" title="并行执行任务"></a>并行执行任务</h2><p>awaitable asyncio.gather(*aws, loop=None, return_exceptions=False)</p><p>aws:task序列,可等待对象自动转换成task</p><h2 id="屏蔽取消操作"><a href="#屏蔽取消操作" class="headerlink" title="屏蔽取消操作"></a>屏蔽取消操作</h2><p>以后再看</p><p>awaitable asyncio.shield(aw, *, loop=None)</p><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p>asyncio.wait_for(aw, timeout, *, loop=None)</p><p>超时,发送cancellation</p><p>等待直到aw确实结束了,所以运行时间&gt;=timeout</p><h2 id="waiting-primitives"><a href="#waiting-primitives" class="headerlink" title="waiting primitives"></a>waiting primitives</h2><ol><li><p>coroutine asyncio.wait(aws, *, loop=None, timeout=None, return_when=ALL_COMPLETED)</p><p>并行运行aws,并阻塞直到 return_when条件达成</p><p>超时wait不会cancel</p><p>返回done,pending</p><p>由于会自动把 coro 转成task,导致coro不会出现在done或pending(里面是task)</p></li><li><p>asyncio.as_completed(aws, *, loop=None, timeout=None)</p><p>返回Future对象迭代器,表示最早出结果的aw</p><p>如果超时(所以futures没有在timeout内完成),raise asyncio.TimeoutError</p></li></ol><h2 id="来自其他线程调度-schedule"><a href="#来自其他线程调度-schedule" class="headerlink" title="来自其他线程调度(schedule)"></a>来自其他线程调度(schedule)</h2><p>暂时用不到,以后再看</p><h2 id="Introspection-内省"><a href="#Introspection-内省" class="headerlink" title="Introspection 内省"></a>Introspection 内省</h2><ol><li>asyncio.current_task(loop=None):返回loop正在运行的task</li><li>asyncio.all_tasks(loop=None):返回还没有完成的 task集合</li></ol><h2 id="Task-对象"><a href="#Task-对象" class="headerlink" title="Task 对象"></a>Task 对象</h2><ol><li><p>类future,非线程安全</p></li><li><p>一个coro在await future,task会把coro suspend,然后等待future 完成,然后resume coro,继续运行</p></li><li><p>事件循环使用cooperative scheduling:一个事件循环同时只执行一个task,当一个task等待future完成时:事件循环会接着运行其他task,callbacks,或者执行io 操作</p></li><li><p>创建事件:</p><ol><li>asyncio.create_task() </li><li>loop.create_task() </li><li>ensure_future()</li></ol></li><li><p>取消</p><ol><li>cancel:task会向coro发送CancelledError,如果在等待future,future会被cancel</li><li>cancelled:判断task是否确实被cancelled()</li></ol></li><li><p>Task 从 Future 继承了所有APIs ,除了 Future.set_result() and Future.set_exception().</p></li><li><p>API:all_tasks</p><ol><li>cancel</li><li>cancelled</li><li>done</li><li>result:返回结果</li><li>exception:返回coro抛出的异常,否则None</li><li>add_done_callback:完成回调,详见Future</li><li>remove_done_callback(callback):</li><li>get_stack</li><li>print_stack</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-协程&quot;&gt;&lt;a href=&quot;#python-协程&quot; class=&quot;headerlink&quot; title=&quot;python 协程&quot;&gt;&lt;/a&gt;python 协程&lt;/h1&gt;&lt;h2 id=&quot;协程运行&quot;&gt;&lt;a href=&quot;#协程运行&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="python" scheme="http://blog.azero-ng.cn/categories/python/"/>
    
      <category term="asyncio" scheme="http://blog.azero-ng.cn/categories/python/asyncio/"/>
    
    
      <category term="python" scheme="http://blog.azero-ng.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>记一次archlinux莫名鼠标键盘失灵</title>
    <link href="http://blog.azero-ng.cn/%E8%AE%B0%E4%B8%80%E6%AC%A1archlinux%E8%8E%AB%E5%90%8D%E9%BC%A0%E6%A0%87%E9%94%AE%E7%9B%98%E5%A4%B1%E7%81%B5.html"/>
    <id>http://blog.azero-ng.cn/记一次archlinux莫名鼠标键盘失灵.html</id>
    <published>2019-06-28T01:36:00.000Z</published>
    <updated>2019-08-04T09:03:29.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有一天开机突然发现键盘鼠标失灵了"><a href="#有一天开机突然发现键盘鼠标失灵了" class="headerlink" title="有一天开机突然发现键盘鼠标失灵了"></a>有一天开机突然发现键盘鼠标失灵了</h1><ol><li>修改内核参数,加入single进入单例模式</li><li>journalctl -xb</li><li>搜索 fail</li><li>发现virtual box项</li><li>关闭virtual box加载的几个模块</li><li>重启</li></ol><p>搞定</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;有一天开机突然发现键盘鼠标失灵了&quot;&gt;&lt;a href=&quot;#有一天开机突然发现键盘鼠标失灵了&quot; class=&quot;headerlink&quot; title=&quot;有一天开机突然发现键盘鼠标失灵了&quot;&gt;&lt;/a&gt;有一天开机突然发现键盘鼠标失灵了&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;修改内核参数,加
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.azero-ng.cn/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx_apache_php_上传文件限制</title>
    <link href="http://blog.azero-ng.cn/nginx-apache-php-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E9%99%90%E5%88%B6.html"/>
    <id>http://blog.azero-ng.cn/nginx-apache-php-上传文件限制.html</id>
    <published>2019-06-20T08:10:48.000Z</published>
    <updated>2019-08-04T09:03:18.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx-上传文件限制"><a href="#nginx-上传文件限制" class="headerlink" title="nginx 上传文件限制"></a>nginx 上传文件限制</h1><p>client_max_body_size 150M </p><p>必须要放在server下的server_name下</p><p>nginx -s reload</p><h1 id="apache-上传文件限制"><a href="#apache-上传文件限制" class="headerlink" title="apache 上传文件限制"></a>apache 上传文件限制</h1><p>.htaccess</p><p>LimitRequestBody     1024000000</p><h1 id="php-上传文件限制"><a href="#php-上传文件限制" class="headerlink" title="php 上传文件限制"></a>php 上传文件限制</h1><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upload_max_filesize: 上传的文件的最大大小</span><br><span class="line">post_max_size: POST数据所允许的最大大小</span><br><span class="line">max_execution_time: 脚本最大执行时间</span><br><span class="line">max_input_time: 脚本解析请求数据消耗的最大时间</span><br><span class="line">memory_limit:一个脚本所能够申请到的最大内存字节数</span><br></pre></td></tr></table></figure><h1 id="mysql-最大sql语句限制"><a href="#mysql-最大sql语句限制" class="headerlink" title="mysql 最大sql语句限制"></a>mysql 最大sql语句限制</h1><p>Err [Imp] 1153 - Got a packet bigger than ‘max_allowed_packet’ </p><p>在MySQL安装目录下找到文件my.cnf，搜索[mysqld]，在其下面添加一句话</p><p>max_allowed_packet=150M</p><p>systemctl restart mariadb</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx-上传文件限制&quot;&gt;&lt;a href=&quot;#nginx-上传文件限制&quot; class=&quot;headerlink&quot; title=&quot;nginx 上传文件限制&quot;&gt;&lt;/a&gt;nginx 上传文件限制&lt;/h1&gt;&lt;p&gt;client_max_body_size 150M &lt;/p&gt;
      
    
    </summary>
    
      <category term="运维" scheme="http://blog.azero-ng.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里云v2ray</title>
    <link href="http://blog.azero-ng.cn/%E9%98%BF%E9%87%8C%E4%BA%91v2ray.html"/>
    <id>http://blog.azero-ng.cn/阿里云v2ray.html</id>
    <published>2019-06-20T02:56:32.000Z</published>
    <updated>2019-08-04T09:03:18.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h1><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span>全新的安装</span><br><span class="line">sudo curl -sSL https://raw.githubusercontent.com/MeowLove/AlibabaCloud-CentOS7-Pure-and-safe/master/download/kill/New_installation.sh | sudo bash</span><br><span class="line"><span class="hljs-meta">#</span> 重启 安装锐速第二部</span><br><span class="line">sudo curl -sSL https://raw.githubusercontent.com/MeowLove/AlibabaCloud-CentOS7-Pure-and-safe/master/download/LotServer/install_step2.sh | sudo bash</span><br></pre></td></tr></table></figure><h2 id="未删完"><a href="#未删完" class="headerlink" title="未删完"></a>未删完</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/cloudmonitor/CmsGoAgent.linux-amd64 stop</span><br><span class="line">/usr/local/cloudmonitor/CmsGoAgent.linux-amd64 uninstall</span><br><span class="line">rm -rf /usr/local/cloudmonitor</span><br></pre></td></tr></table></figure><h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span>允许来自于lo接口的数据包 </span><br><span class="line"><span class="hljs-meta">#</span>如果没有此规则，你将不能通过127.0.0.1访问本地服务，例如ping 127.0.0.1 </span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -t nat -F</span><br><span class="line">iptables -t nat -X</span><br><span class="line">iptables -t mangle -F</span><br><span class="line">iptables -t mangle -X</span><br><span class="line">iptables -t raw -F</span><br><span class="line">iptables -t raw -X</span><br><span class="line">iptables -t security -F</span><br><span class="line">iptables -t security -X</span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span>禁用云盾</span><br><span class="line">iptables -I INPUT -s 140.205.201.0/28 -j DROP</span><br><span class="line">iptables -I INPUT -s 140.205.201.16/29 -j DROP</span><br><span class="line">iptables -I INPUT -s 140.205.201.32/28 -j DROP</span><br><span class="line">iptables -I INPUT -s 140.205.225.192/29 -j DROP</span><br><span class="line">iptables -I INPUT -s 140.205.225.200/30 -j DROP</span><br><span class="line">iptables -I INPUT -s 140.205.225.184/29 -j DROP</span><br><span class="line">iptables -I INPUT -s 140.205.225.183/32 -j DROP</span><br><span class="line">iptables -I INPUT -s 140.205.225.206/32 -j DROP</span><br><span class="line">iptables -I INPUT -s 140.205.225.205/32 -j DROP</span><br><span class="line">iptables -I INPUT -s 140.205.225.195/32 -j DROP</span><br><span class="line">iptables -I INPUT -s 140.205.225.204/32 -j DROP</span><br><span class="line"><span class="hljs-meta">#</span>常用</span><br><span class="line">iptables -A OUTPUT -p tcp --match multiport --sports 22,80,443 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --match multiport --dports 22,80,443 -j ACCEPT</span><br><span class="line">iptables -A INPUT -i lo -p all -j ACCEPT </span><br><span class="line">iptables -A OUTPUT -o lo -p all -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p icmp -j ACCEPT</span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span>禁用</span><br><span class="line">iptables -P INPUT DROP</span><br></pre></td></tr></table></figure><h2 id="保存配置"><a href="#保存配置" class="headerlink" title="保存配置"></a>保存配置</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable v2ray</span><br><span class="line">systemctl enable nginx</span><br><span class="line">systemctl enable iptables</span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://www.moerats.com/archives/625/" target="_blank" rel="noopener">https://www.moerats.com/archives/625/</a></p><p><a href="https://github.com/MeowLove/AlibabaCloud-CentOS7-Pure-and-safe" target="_blank" rel="noopener">https://github.com/MeowLove/AlibabaCloud-CentOS7-Pure-and-safe</a></p><p><a href="https://www.ljchen.com/archives/827" target="_blank" rel="noopener">锐速、BBR和BBR_POWERED（魔改）对比测试</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;清空&quot;&gt;&lt;a href=&quot;#清空&quot; class=&quot;headerlink&quot; title=&quot;清空&quot;&gt;&lt;/a&gt;清空&lt;/h1&gt;&lt;figure class=&quot;highlight shell hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="vps" scheme="http://blog.azero-ng.cn/categories/vps/"/>
    
    
  </entry>
  
  <entry>
    <title>编译原理-语法分析</title>
    <link href="http://blog.azero-ng.cn/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.html"/>
    <id>http://blog.azero-ng.cn/编译原理-语法分析.html</id>
    <published>2019-06-06T00:37:45.000Z</published>
    <updated>2019-08-04T09:03:28.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="归约和推导"><a href="#归约和推导" class="headerlink" title="归约和推导"></a>归约和推导</h3><p>推导：用产生式的右部替换产生式的左部<br>规约：用产生式的左部替换产生式的右部</p><p>最左推导: 最左非终结符号进行替换<br>最右推导: 最右非终结符号进行替换</p><p>最左归约: 最左终结符号进行替换<br>最右归约: 最右终结符号进行替换</p><p>规范推导: 最右推导称为规范推导<br>最右推导对应于最左规约: 想象一下,最右推导从后往前逆,就是最左归约</p><h3 id="句型和句子"><a href="#句型和句子" class="headerlink" title="句型和句子"></a>句型和句子</h3><ol><li>文法: <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    　　S→AB</span><br><span class="line">    　　A→aA|a</span><br><span class="line">    　　B→bB|b</span><br></pre></td></tr></table></figure></li></ol><p>用上述文法推导字符串aaabbb过程如下：<br>　　S→AB→aAB→aaAB→aaaB→aaabB→aaabbB→aaabbb</p><ol start="2"><li>句型: AB、aAB、aaAB、aaaB、aaabB、aaabbB和aaabbb都是上述文法的一个句型</li><li>句子: 全部由终结符组成的句型叫句子,如:aaabbb<h3 id="短语-直接（简单）短语-句柄"><a href="#短语-直接（简单）短语-句柄" class="headerlink" title="短语,直接（简单）短语,句柄"></a>短语,直接（简单）短语,句柄</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><img src="/home/azero/blog/source/_posts/编译原理-语法分析/短语和简单短语定义.png" alt="定义"><br>短语、简单短语都是针对某一句型的，是相对于某个非终结符号的，并且任何句型本身一定是相对于识别符号Z的短语。</li></ol><h4 id="语法树版"><a href="#语法树版" class="headerlink" title="语法树版"></a>语法树版</h4><p>实例文法<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S-&gt;(L)|aS|a</span><br><span class="line">L-&gt;L,S|S</span><br></pre></td></tr></table></figure></p><p>分析(S,(a))</p><h5 id="语法树"><a href="#语法树" class="headerlink" title="语法树"></a>语法树</h5><p><img src="/home/azero/blog/source/_posts/编译原理-语法分析/语法树短语简单短语.png" alt="语法树"></p><h5 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h5><p>一个句型的语法树中任一子树叶节点所组成的符号串都是该句型的短语。</p><ol><li>第二层: (S,(a))</li><li>第三层: S,(a)</li><li>第四层:<ol><li>S</li><li>(a)</li></ol></li><li>第五层: a</li></ol><h5 id="直接（简单）短语"><a href="#直接（简单）短语" class="headerlink" title="直接（简单）短语"></a>直接（简单）短语</h5><p>当子树不包含其他更小的子树时，该子树叶节点所组成的字符串就是该句型的直接短语<br>直接短语:</p><ol><li>a</li><li>S</li></ol><h5 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h5><p>句柄是最左边的直接短语<br>句柄:S</p><h5 id="素短语-待完善-这个含有到底是怎么含有-能推导算含有吗"><a href="#素短语-待完善-这个含有到底是怎么含有-能推导算含有吗" class="headerlink" title="素短语(待完善):这个含有到底是怎么含有,能推导算含有吗?"></a>素短语(待完善):这个含有到底是怎么含有,能推导算含有吗?</h5><p>素短语是一个短语，它至少含有一个终结符，而且除他之外不含有其他素短语。<br>短语包含素短语，我们可以直接在短语中判断。<br>因为S可以推导出其他字符，(a);S,(a);(S,(a))都包含其他素短语，所以符合条件的只有a.</p><h4 id="个人理解-给我看的"><a href="#个人理解-给我看的" class="headerlink" title="个人理解(给我看的)"></a>个人理解(给我看的)</h4><p>短语 是 句型的一部分,可以归约成一个非终结符号<br>所以句柄就是最左边,可以最先归约成一个非终结符号</p><h3 id="语法树-todo"><a href="#语法树-todo" class="headerlink" title="语法树(todo)"></a>语法树(todo)</h3><h2 id="语法分析的方法"><a href="#语法分析的方法" class="headerlink" title="语法分析的方法"></a>语法分析的方法</h2><h3 id="自顶向下分析-推导过程"><a href="#自顶向下分析-推导过程" class="headerlink" title="自顶向下分析 推导过程"></a>自顶向下分析 推导过程</h3><h4 id="递归下降分析"><a href="#递归下降分析" class="headerlink" title="递归下降分析"></a>递归下降分析</h4><h4 id="LL-1-分析"><a href="#LL-1-分析" class="headerlink" title="LL(1)分析"></a>LL(1)分析</h4><h3 id="自底向上分析-归约过程"><a href="#自底向上分析-归约过程" class="headerlink" title="自底向上分析 归约过程"></a>自底向上分析 归约过程</h3><h4 id="一般分析方法"><a href="#一般分析方法" class="headerlink" title="一般分析方法"></a>一般分析方法</h4><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ol><li>分析思想:移进–归约(Shift-Reduce)</li><li>解决问题:寻找当前句型的句柄</li><li>分析方法:利用一个符号栈来记录分析的历史和指示分析下一步动作.</li><li>动作(有点连连看的意思啊,对对碰)<ol><li>移进:将输入串中的一个符号移进栈里;</li><li>归约:当栈顶呈现句柄时用相应的规则替换;</li><li>接受:宣布分析成功,此时栈顶只有一开始符号;</li><li>出错:栈顶内容与输入串相悖,分析无法进行;<h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4></li></ol></li><li>句柄为什么会呈现在栈顶?<ol><li>句柄是句型最左边的简单短语;栈内和栈外符号构成当前句型。</li></ol></li><li>如何快速准确寻找当前句型的句柄.<ol><li>需要通过算法解决,而不能利用语法树.</li><li>不同的文法有不同的寻找句柄的方法<ol><li>简单优先文法: 最左归约,解决算术(逻辑)表达式的分析</li><li>算符优先文法: “最左归约”,解决算术(逻辑)表达式的分析</li><li>LR分析法: <ol><li>LR(0)文法 SLR(1)文法 LR(1)文法 </li><li>最左归约,可分析无二义性上下文无关文法</li></ol></li></ol></li></ol></li></ol><h4 id="简单优先分析"><a href="#简单优先分析" class="headerlink" title="简单优先分析"></a>简单优先分析</h4><ol><li>优先关系<ol><li>若X与Y的优先级相等 $ X \eqcirc  Y$</li><li>若X的优先级比Y的优先级高$ X \gtrdot Y$</li><li>若X的优先级比Y的优先级低$ X \lessdot Y $</li></ol></li><li>优先关系判定<ol><li>$ X \eqcirc  Y$：当且仅当G中存在产生式规则A → …XY…</li><li>$ X \lessdot Y$：当且仅当G中存在产生式规则A → …XB..，B → Y….【B规约了，X才能规约】</li><li>$ X \gtrdot  Y $：当且仅当G中存在产生式规则A → …BC…，B → …X，C → Y…【最左规约，先规约B】</li></ol></li><li>寻找句柄<ol><li>在任何规范句型中,满足以下条件的最左子串<ol><li>最左字符大于左面的字符</li><li>最右字符大于右面的字符</li><li>内部字符优先级相等</li></ol></li></ol></li><li>执行算法,读入一个单词后,比较栈顶符号和该单词的优先级:<ol><li>若栈顶符号优先级低于该单词，继续入栈；</li><li>等于时，寻找句柄进行规约</li><li>若栈顶符号优先级高于该单词,句柄寻找完毕,向栈内寻找句柄尾部,规约,再次比较优先级</li><li>直至最终栈内只剩下开始符号，输入带剩下#，此时识别正确。</li></ol></li><li>文法限制<ol><li>任意两个字符之间只存在唯一的一种关系（等于，小于或者大于）</li><li>任意两个产生式没有相同的右部,无二义性</li></ol></li><li>简单优先关系矩阵<ol><li>矩阵元素只有为空或者其中一种优先关系</li><li>为空表示没有任何句型中存在这两个符号的相邻，遇见这种相邻就是错误的</li><li>#的优先级小于所有符号，所有符号的优先级大于#【当然是它们相邻的情况下才有这种关系】</li></ol></li><li>优缺点<ol><li>说明:只有相邻的符号之间才存在优先级，并且优先级是唯一</li><li>缺点:适用范围小（只针对简单优先文法）；分析表尺寸过大（都需要去它们之间的关系）</li><li>优点：技术简单</li></ol></li><li>局限性:<ol><li>多重定义优先关系—-非简单优先文法,解决方法:改写文法</li><li>文法的复杂性增加,改写不能解决,解决方法LR(K)分析法</li><li>在实际的运算过程中,决定运算顺序的是终结符号之间的优先关系.<ol><li>算符优先分析法:只考虑终结符号之间的优先关系</li></ol></li></ol></li></ol><h4 id="算符优先分析"><a href="#算符优先分析" class="headerlink" title="算符优先分析"></a>算符优先分析</h4><h5 id="算符优先分析法"><a href="#算符优先分析法" class="headerlink" title="算符优先分析法"></a>算符优先分析法</h5><ol><li>算符文法OG<ol><li>设一文法G,若G中不含U→…VW…规则,V, W∈Vn</li></ol></li><li>算符优先文法(OPG)<ol><li>前提:og文法</li><li>a=b:如U→….ab….或U→….aVb…</li><li>a\&lt;b:有形如U→….aW….的规则,且W=+>b….或W=+&gt;Vb…..</li><li>a&gt;b:有形如U→….Wb….的规则,而且W=+&gt; …. a或W=+&gt;….aV</li></ol></li></ol><h5 id="算符优先分析算法设计"><a href="#算符优先分析算法设计" class="headerlink" title="算符优先分析算法设计"></a>算符优先分析算法设计</h5><ol><li>素短语:至少包含有一个终结符号,并且除它自身之外,不再包含其它任何更小的素短语。</li><li>算符优先文法句型的一般形式:N 1a1N 2a2 …… NnanNn+1# ai∈Vt,Ni ∈Vn(可有可无)</li><li>最左素短语的确定,满足以下条件的最左子串Njaj…..Niai N i+1<ol><li>a j-1 &lt; aj</li><li>aj = a j+1 = … = a i-1 = ai</li><li>ai &gt; a i+1</li><li>类似简单文法分析,但是只是终结符</li></ol></li><li>分析流程:<ol><li>先找最左素短语的头部( 首次满足&gt; )</li><li>再找最左素短语的尾部( 首次满足&lt; )</li><li>中间夹的终结符号优先级相等 =</li></ol></li></ol><h5 id="算符优先关系矩阵构造"><a href="#算符优先关系矩阵构造" class="headerlink" title="算符优先关系矩阵构造"></a>算符优先关系矩阵构造</h5><ol><li><p>$ A \eqcirc B $<br> 查规则</p></li><li><p>$ A \lessdot B$ 或 $ A \gtrdot B$<br> 构造两个集合FIRSTVT(U) LASTVT(U)</p><ol><li><p>FIRSTVT(U)={b∣U=+&gt;b…, 或U =+&gt; Vb…, b∈Vt,V∈V n }</p><ol><li>则形如W→…aU…的规则a &lt; b,b ∈ FIRSTVT(U)</li></ol></li><li><p>LASTVT(U)={a∣U=+&gt;…a, 或U =+&gt;…aV, a∈Vt, V ∈Vn }</p><ol><li>a &gt; b,a ∈LASTVT(U)</li></ol></li><li><p>构造算法:</p><ol><li>初始化:U→b…, 或U→Vb…,则b ∈ FIRSTVT(U)</li><li>循环: U →V…,且b ∈ FIRSTVT(V) 则b ∈ FIRSTVT(U)</li></ol></li><li><p>算法分析(不推荐,效率太低)</p><ol><li><p>初始:F(U,b)初值(根据原则1),F(U,b)为真的(U,b)对进STACK栈</p></li><li><p>循环:直至STACK空(根据原则2)</p><p>弹出栈顶元素,记(V,b)<br>对每一个形如U→V…的规则<br>若F(U,b) 为假,变为真, 进STACK栈<br>若F(U,b)为真,再循环</p></li></ol></li><li></li></ol></li></ol><h4 id="LR分析法"><a href="#LR分析法" class="headerlink" title="LR分析法"></a>LR分析法</h4><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ] 语法树</li><li>[ ] 树的概念 简单子树,二叉树,等等 新开一篇文章<h1 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h1></li></ul><ol><li>句子和句型<br><a href="https://zhenyuzhai.wordpress.com/2008/11/30/编译原理句子和句型的区别/" target="_blank" rel="noopener">编译原理句子和句型的区别</a></li><li><p>短语,直接（简单）短语,句柄<br><a href="https://blog.csdn.net/Katniss_smile/article/details/52640272" target="_blank" rel="noopener">编译原理：短语，简单短语，句柄，语法树</a><br><a href="https://blog.csdn.net/u014297473/article/details/45825663" target="_blank" rel="noopener">通过语法树判断,写的非常清晰</a></p></li><li><p>简单优先分析法<br><a href="https://www.jianshu.com/p/6f88d25c4716" target="_blank" rel="noopener">编译原理-简单优先分析法</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;语法分析&quot;&gt;&lt;a href=&quot;#语法分析&quot; class=&quot;headerlink&quot; title=&quot;语法分析&quot;&gt;&lt;/a&gt;语法分析&lt;/h1&gt;&lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="http://blog.azero-ng.cn/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.azero-ng.cn/命令模式.html</id>
    <published>2019-06-04T13:26:21.000Z</published>
    <updated>2019-08-04T09:03:18.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol><li>目的:将一个请求封装成一个对象</li><li>解决的问题: 行为请求者与行为实现者通常是一种紧耦合的关系.但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</li><li>如何解决: 通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。</li><li>关键角色:<ol><li>received 真正的命令执行对象</li><li>Command</li><li>invoker 使用命令对象的入口</li></ol></li><li>优点： <ol><li>降低了系统耦合度。 </li><li>新的命令可以很容易添加到系统中去</li></ol></li><li>使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="Receiver-具体命令执行者"><a href="#Receiver-具体命令执行者" class="headerlink" title="Receiver 具体命令执行者"></a>Receiver 具体命令执行者</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Receiver</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="hljs-keyword">private</span> String name = <span class="hljs-string">"ABC"</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> quantity = <span class="hljs-number">10</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.quantity++;</span><br><span class="line">       System.out.println(<span class="hljs-string">"Stock [ Name: "</span>+name+<span class="hljs-string">", Quantity: "</span> + quantity +<span class="hljs-string">" ] bought"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sell</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.quantity--;</span><br><span class="line">       System.out.println(<span class="hljs-string">"Stock [ Name: "</span>+name+<span class="hljs-string">", Quantity: "</span> + quantity +<span class="hljs-string">" ] sold"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Order-命令对象"><a href="#Order-命令对象" class="headerlink" title="Order 命令对象"></a>Order 命令对象</h3><h5 id="Order借口"><a href="#Order借口" class="headerlink" title="Order借口"></a>Order借口</h5><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Order</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体Order实现"><a href="#具体Order实现" class="headerlink" title="具体Order实现"></a>具体Order实现</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyOrder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Order</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Receiver abcStock;</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BuyOrder</span><span class="hljs-params">(Receiver abcStock)</span></span>&#123;</span><br><span class="line">       <span class="hljs-keyword">this</span>.abcStock = abcStock;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">       abcStock.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SellOrder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Order</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Receiver abcStock;</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SellOrder</span><span class="hljs-params">(Receiver abcStock)</span></span>&#123;</span><br><span class="line">       <span class="hljs-keyword">this</span>.abcStock = abcStock;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">       abcStock.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Invoker命令序列同意调用者"><a href="#Invoker命令序列同意调用者" class="headerlink" title="Invoker命令序列同意调用者"></a>Invoker命令序列同意调用者</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> List&lt;Order&gt; orderList = <span class="hljs-keyword">new</span> ArrayList&lt;Order&gt;(); </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">takeOrder</span><span class="hljs-params">(Order order)</span></span>&#123;</span><br><span class="line">       orderList.add(order);      </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">placeOrders</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">       <span class="hljs-keyword">for</span> (Order order : orderList) &#123;</span><br><span class="line">          order.execute();</span><br><span class="line">       &#125;</span><br><span class="line">       orderList.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://blog.azero-ng.cn/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.azero-ng.cn/观察者模式.html</id>
    <published>2019-06-04T12:31:09.000Z</published>
    <updated>2019-08-04T09:03:18.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol><li>意图:对象一对多的依赖关系,一个状态改变,则通知所有依赖对象</li><li>解决问题: 一个对象改变如何通知给其他对象问题</li><li>何时使用: 一对多依赖关系,广播通知</li><li>关键代码：在抽象类里有一个 ArrayList 存放观察者们<h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ol><li>观察者和被观察者是抽象耦合的。</li><li>建立一套触发机制。<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2></li><li>观察者过多,通知会花费较多时间</li><li>循环依赖</li><li>观察者只知道改变了,不知道改变原因<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h3></li></ol></li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers</span><br><span class="line">        = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.state = state;</span><br><span class="line">        notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attach</span><span class="hljs-params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyAllObservers</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">protected</span> Subject subject;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> state)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="concret-Observer"><a href="#concret-Observer" class="headerlink" title="concret Observer"></a>concret Observer</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryObserver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Observer</span></span>&#123;</span><br><span class="line">   <span class="hljs-meta">@Override</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">      System.out.println( <span class="hljs-string">"Binary String: "</span></span><br><span class="line">      + Integer.toBinaryString( state ) );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    BinaryObserver a = <span class="hljs-keyword">new</span> BinaryObserver(<span class="hljs-string">"a"</span>);</span><br><span class="line">    BinaryObserver b = <span class="hljs-keyword">new</span> BinaryObserver(<span class="hljs-string">"b"</span>);</span><br><span class="line">    BinaryObserver c = <span class="hljs-keyword">new</span> BinaryObserver(<span class="hljs-string">"c"</span>);</span><br><span class="line"></span><br><span class="line">    Subject cause = <span class="hljs-keyword">new</span> Subject();</span><br><span class="line">    cause.attach(a);</span><br><span class="line">    cause.attach(b);</span><br><span class="line">    cause.attach(c);</span><br><span class="line"></span><br><span class="line">    cause.setState(<span class="hljs-number">1154</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>门面模式</title>
    <link href="http://blog.azero-ng.cn/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.azero-ng.cn/门面模式.html</id>
    <published>2019-06-04T08:11:08.000Z</published>
    <updated>2019-08-04T09:03:18.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol><li>组成:client,Facade,modules</li><li>解决问题:子模块过多,客户调用复杂</li><li>解决方案:引入facade,客户只知道facade,简化系统复杂性,modules只知道facade,并把它当做客户.</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p>降低耦合度</p><p>降低了client和modules的耦合度,使modules更容易扩展和维护.</p></li><li><p>简单易用</p><p>使子系统更易用,client不再需要和子系统交互.</p></li><li><p>更好的划分访问层次</p></li></ol><p>　　通过合理使用Facade，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModuleA</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//示意方法</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testA</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"调用ModuleA中的testA方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModuleB</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//示意方法</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testB</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"调用ModuleB中的testB方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModuleC</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testC</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"调用ModuleC中的testC方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Facade_in</span> </span>&#123;</span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           ModuleA a = <span class="hljs-keyword">new</span> ModuleA();</span><br><span class="line">           a.testA();</span><br><span class="line">           ModuleB b = <span class="hljs-keyword">new</span> ModuleB();</span><br><span class="line">           b.testB();</span><br><span class="line">           ModuleC c = <span class="hljs-keyword">new</span> ModuleC();</span><br><span class="line">           c.testC();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">new</span> Facade_in().test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">new</span> Facade().run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;门面模式&quot;&gt;&lt;a href=&quot;#门面模式&quot; class=&quot;headerlink&quot; title=&quot;门面模式&quot;&gt;&lt;/a&gt;门面模式&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://blog.azero-ng.cn/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.azero-ng.cn/代理模式.html</id>
    <published>2019-06-04T03:38:28.000Z</published>
    <updated>2019-08-04T09:03:18.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ol><li>目的:为其他对象提供一种代理以控制对这个对象的访问。</li><li>解决问题:直接访问对象时带来的问题</li><li><strong>优点：</strong> 1、职责清晰。 2、高扩展性。 3、智能化。</li><li><strong>注意事项：</strong><ol><li>和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 </li><li>和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</li></ol></li><li>疑问:和单例模式什么区别</li></ol><h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Image</span> </span>&#123;</span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="被代理"><a href="#被代理" class="headerlink" title="被代理"></a>被代理</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RealImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Image</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="hljs-keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RealImage</span><span class="hljs-params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.fileName = fileName;</span><br><span class="line">      loadFromDisk(fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="hljs-meta">@Override</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="hljs-string">"Displaying "</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadFromDisk</span><span class="hljs-params">(String fileName)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="hljs-string">"Loading "</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Image</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="hljs-keyword">private</span> RealImage realImage;</span><br><span class="line">   <span class="hljs-keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyImage</span><span class="hljs-params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.fileName = fileName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="hljs-meta">@Override</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(realImage == <span class="hljs-keyword">null</span>)&#123;</span><br><span class="line">         realImage = <span class="hljs-keyword">new</span> RealImage(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      realImage.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;目的:为其他对象提供一种代理以控制对这个对象的访问。&lt;/li&gt;
&lt;li&gt;解决问题:直接访问对象时带来的问题&lt;/li&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰器模式</title>
    <link href="http://blog.azero-ng.cn/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.azero-ng.cn/装饰器模式.html</id>
    <published>2019-06-04T02:48:46.000Z</published>
    <updated>2019-08-04T09:03:18.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ol><li>目的:动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</li><li>解决问题:继承方式会导致子类过多问题</li><li>适用场景:在不想增加很多子类的情况下扩展类。</li><li>组成结构:<ol><li>Component 类充当抽象角色，不应该具体实现。 </li><li>修饰类引用和继承 Component 类，具体扩展类重写父类方法。</li></ol></li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="被装饰类"><a href="#被装饰类" class="headerlink" title="被装饰类"></a>被装饰类</h2><h3 id="被装饰类接口"><a href="#被装饰类接口" class="headerlink" title="被装饰类接口"></a>被装饰类接口</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Memory</span> </span>&#123;</span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体实现被装饰类"><a href="#具体实现被装饰类" class="headerlink" title="具体实现被装饰类"></a>具体实现被装饰类</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DDR3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Memory</span> </span>&#123;</span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="hljs-string">"DDR3 Memory"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DDR4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Memory</span> </span>&#123;</span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="hljs-string">"DDR4 Memory"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰类"><a href="#装饰类" class="headerlink" title="装饰类"></a>装饰类</h2><h3 id="装饰类接口"><a href="#装饰类接口" class="headerlink" title="装饰类接口"></a>装饰类接口</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemoryDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Memory</span> </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">protected</span> Memory mem;</span><br><span class="line"> </span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MemoryDecorator</span><span class="hljs-params">(Memory decoratedShape)</span></span>&#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.decoratedShape = decoratedShape;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">      decoratedShape.output();</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器实现"><a href="#装饰器实现" class="headerlink" title="装饰器实现"></a>装饰器实现</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KinstomDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MemoryDecorator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KinstomDecorator</span><span class="hljs-params">(Memory mem)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(mem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="hljs-string">"Kinstom's "</span>);</span><br><span class="line">        <span class="hljs-keyword">this</span>.mem.output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    Memory ddr3 = <span class="hljs-keyword">new</span> DDR3();</span><br><span class="line">    KinstomDecorator kinsddr3 = <span class="hljs-keyword">new</span> KinstomDecorator(<span class="hljs-keyword">new</span> DDR3());</span><br><span class="line">    System.out.println(<span class="hljs-string">"DDR3 output:"</span>);</span><br><span class="line">    ddr3.output();</span><br><span class="line">    System.out.println(<span class="hljs-string">"kinstom's DDR3 output:"</span>);</span><br><span class="line">    kinsddr3.output();</span><br><span class="line">    System.out.println(<span class="hljs-string">"kinstom's DDR4 output:"</span>);</span><br><span class="line">    <span class="hljs-keyword">new</span> KinstomDecorator(<span class="hljs-keyword">new</span> DDR4()).output();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;目的:动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。&lt;/li&gt;
&lt;li&gt;解决问题:继承方式
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://blog.azero-ng.cn/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.azero-ng.cn/适配器模式.html</id>
    <published>2019-05-30T09:05:29.000Z</published>
    <updated>2019-08-04T09:03:18.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p><img src="https://img-blog.csdn.net/20140330074944187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFzb24wNTM5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><ol><li><p>目标接口（Target）：客户所期待的接口。目标可以是具体的或抽象的类，也可以是接口。</p></li><li><p>需要适配的类（Adaptee）：需要适配的类或适配者类。</p></li><li><p>适配器（Adapter）：通过包装一个需要适配的对象，把原接口转换成目标接口。　　</p></li></ol><h2 id="实现方式１-类的适配器模式（采用继承实现）"><a href="#实现方式１-类的适配器模式（采用继承实现）" class="headerlink" title="实现方式１　类的适配器模式（采用继承实现）"></a>实现方式１　类的适配器模式（采用继承实现）</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 已存在的、具有特殊功能、但不符合我们既有的标准接口的类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adaptee</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">specificRequest</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"被适配类具有 特殊功能..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// 目标接口，或称为标准接口</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Target</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// 具体目标类，只提供普通功能</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteTarget</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Target</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"普通类 具有 普通功能..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// 适配器类，继承了被适配类，同时实现标准接口</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Adaptee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Target</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.specificRequest();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// 测试类public class Client &#123;</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">// 使用普通功能类</span></span><br><span class="line">Target concreteTarget = <span class="hljs-keyword">new</span> ConcreteTarget();</span><br><span class="line">concreteTarget.request();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 使用特殊功能类，即适配类</span></span><br><span class="line">Target adapter = <span class="hljs-keyword">new</span> Adapter();</span><br><span class="line">adapter.request();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点看Adapter类,继承adaptee,实现target接口,接口内部 调用真正起作用的函数.最后客户使用Adapter的接口</p><h2 id="对象适配器-直接关联"><a href="#对象适配器-直接关联" class="headerlink" title="对象适配器 直接关联"></a>对象适配器 直接关联</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 适配器类，直接关联被适配类，同时实现标准接口</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Target</span></span>&#123;</span><br><span class="line"><span class="hljs-comment">// 直接关联被适配类</span></span><br><span class="line"><span class="hljs-keyword">private</span> Adaptee adaptee;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 可以通过构造函数传入具体需要适配的被适配类对象</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Adapter</span> <span class="hljs-params">(Adaptee adaptee)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.adaptee = adaptee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">// 这里是使用委托的方式完成特殊功能</span></span><br><span class="line"><span class="hljs-keyword">this</span>.adaptee.specificRequest();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// 测试类</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">// 使用普通功能类</span></span><br><span class="line">Target concreteTarget = <span class="hljs-keyword">new</span> ConcreteTarget();</span><br><span class="line">concreteTarget.request();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 使用特殊功能类，即适配类，</span></span><br><span class="line"><span class="hljs-comment">// 需要先创建一个被适配类的对象作为参数</span></span><br><span class="line">Target adapter = <span class="hljs-keyword">new</span> Adapter(<span class="hljs-keyword">new</span> Adaptee());</span><br><span class="line">adapter.request();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Adapter 存储Adaptee 地址,客户调用Adapter接口,Adapter 再调用Adaptee接口.</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>不需要客户端做改变,可以直接调用接口</li><li>复用现存类,解决环境和现存类接口不一问题</li><li>解耦target和adaptee</li><li>同一个适配器可以把适配者类和它的子类都适配到目标接口。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>对于对象适配器来说，更换适配器的实现过程比较复杂。(为什么呢?挺简单的吧)</p><h2 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>现存类的接口不符合系统的接口</li><li>旧的系统开发的类已经实现了一些功能，但是客户端却只能以另外接口的形式访问，但我们不希望手动更改原有类的时候。</li><li>使用第三方组件，组件接口定义和自己定义的不同，不希望修改自己的接口，但是要使用第三方组件接口的功能。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h1&gt;&lt;h2 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式-原型模式</title>
    <link href="http://blog.azero-ng.cn/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.azero-ng.cn/设计模式-原型模式.html</id>
    <published>2019-05-30T07:54:44.000Z</published>
    <updated>2019-08-04T09:03:18.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="定义-python也有"><a href="#定义-python也有" class="headerlink" title="定义 python也有"></a>定义 python也有</h2><p>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。</p><h2 id="原型类条件"><a href="#原型类条件" class="headerlink" title="原型类条件"></a>原型类条件</h2><ol><li>实现Cloneable接口.在java虚拟机中,只有实现了这个接口的类才可以被拷贝,否则CloneNotSupportedException</li><li>重写clone方法:Object类,有一个clone方法,但是是protect类型,重写变为public类型.</li></ol><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Prototype</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Prototype <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>&#123;  </span><br><span class="line">        Prototype prototype = <span class="hljs-keyword">null</span>;  </span><br><span class="line">        <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">            prototype = (Prototype)<span class="hljs-keyword">super</span>.clone();  </span><br><span class="line">        &#125;<span class="hljs-keyword">catch</span>(CloneNotSupportedException e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="hljs-keyword">return</span> prototype;   </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcretePrototype</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Prototype</span></span>&#123;  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="hljs-string">"原型模式实现类"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;  </span><br><span class="line">        ConcretePrototype cp = <span class="hljs-keyword">new</span> ConcretePrototype();  </span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; i++)&#123;  </span><br><span class="line">            ConcretePrototype clonecp = (ConcretePrototype)cp.clone();  </span><br><span class="line">            clonecp.show();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>性能优于new.clone方法是一个本地方法,直接操作内存的二进制流(如果是特别大的对象,性能的差别非常明显)</li><li>简化对象创建,复制粘贴就好</li></ol><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><ol><li>重复地创建相似对象时可以考虑使用原型模式</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>clone不会调用 构造方法</p></li><li><p>无视构造方法权限,直接复制(对应private 构造方法导致单例的情况)</p></li><li><p>深拷贝:拷贝八种基本数据类型(byte,char,short,int,long,float,double，boolean)</p><p>对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝</p></li><li><p>这很像python啊</p></li></ol><h2 id="浅拷贝的解决办法"><a href="#浅拷贝的解决办法" class="headerlink" title="浅拷贝的解决办法"></a>浅拷贝的解决办法</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Prototype</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;  </span><br><span class="line">    <span class="hljs-keyword">private</span> ArrayList list = <span class="hljs-keyword">new</span> ArrayList();  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Prototype <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>&#123;  </span><br><span class="line">        Prototype prototype = <span class="hljs-keyword">null</span>;  </span><br><span class="line">        <span class="hljs-keyword">try</span>&#123;  </span><br><span class="line">            prototype = (Prototype)<span class="hljs-keyword">super</span>.clone();  </span><br><span class="line">            prototype.list = (ArrayList) <span class="hljs-keyword">this</span>.list.clone();  </span><br><span class="line">        &#125;<span class="hljs-keyword">catch</span>(CloneNotSupportedException e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="hljs-keyword">return</span> prototype;   </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h1&gt;&lt;h2 id=&quot;定义-python也有&quot;&gt;&lt;a href=&quot;#定义-python也有&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="http://blog.azero-ng.cn/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.azero-ng.cn/简单工厂模式.html</id>
    <published>2019-05-30T02:47:12.000Z</published>
    <updated>2019-08-04T09:03:18.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h1&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>builder设计模式</title>
    <link href="http://blog.azero-ng.cn/builder%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://blog.azero-ng.cn/builder设计模式.html</id>
    <published>2019-05-30T01:33:17.000Z</published>
    <updated>2019-08-04T09:03:18.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之建造者模式"><a href="#设计模式之建造者模式" class="headerlink" title="设计模式之建造者模式"></a>设计模式之建造者模式</h1><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>看定义感觉和工厂模式很像啊</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><h2 id="Builder：抽象-产品的生成步骤"><a href="#Builder：抽象-产品的生成步骤" class="headerlink" title="Builder：抽象 产品的生成步骤"></a>Builder：抽象 产品的生成步骤</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildCpu</span><span class="hljs-params">()</span></span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildGpu</span><span class="hljs-params">()</span></span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildMotherBoard</span><span class="hljs-params">()</span></span>;</span><br><span class="line">    <span class="hljs-function">Computer <span class="hljs-title">buildComputer</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ConcreteBuilder：实现builder-不同产品-采用不同的ConcreteBuilder"><a href="#ConcreteBuilder：实现builder-不同产品-采用不同的ConcreteBuilder" class="headerlink" title="ConcreteBuilder：实现builder,不同产品 采用不同的ConcreteBuilder"></a>ConcreteBuilder：实现builder,不同产品 采用不同的ConcreteBuilder</h2><p>由于不同产品拥有不同的生产过程,所以不同产品不同ConcreteBuilder</p><p>如果两个产品之间只有部分修改,可以考虑通过继承,override修改部分功能</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmdBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">       Computer com;</span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AmdBuilder</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           com = <span class="hljs-keyword">new</span> Computer();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildCpu</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           com.setCpu(<span class="hljs-string">"AMD"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildGpu</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           com.setGpu(<span class="hljs-string">"AMD Radeon"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildMotherBoard</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           com.setMother_board(<span class="hljs-string">"asus"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> Computer <span class="hljs-title">buildComputer</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           <span class="hljs-keyword">return</span> com;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntelBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">       Computer com;</span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IntelBuilder</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           com = <span class="hljs-keyword">new</span> Computer();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildCpu</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           com.setCpu(<span class="hljs-string">"Intel"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildGpu</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           com.setGpu(<span class="hljs-string">"Navi"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildMotherBoard</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           com.setMother_board(<span class="hljs-string">"华擎"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="hljs-function"><span class="hljs-keyword">public</span> Computer <span class="hljs-title">buildComputer</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">           <span class="hljs-keyword">return</span> com;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Director：把-所有的生产步骤联系起来-最终生产出产品"><a href="#Director：把-所有的生产步骤联系起来-最终生产出产品" class="headerlink" title="Director：把 所有的生产步骤联系起来,最终生产出产品"></a>Director：把 所有的生产步骤联系起来,最终生产出产品</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComDirector</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Computer <span class="hljs-title">constructCom</span><span class="hljs-params">(ComputerBuilder CB)</span></span>&#123;</span><br><span class="line">        CB.buildCpu();</span><br><span class="line">        CB.buildGpu();</span><br><span class="line">        CB.buildMotherBoard();</span><br><span class="line">        <span class="hljs-keyword">return</span> CB.buildComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Product：要生产的产品框架"><a href="#Product：要生产的产品框架" class="headerlink" title="Product：要生产的产品框架"></a>Product：要生产的产品框架</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String cpu;</span><br><span class="line">    <span class="hljs-keyword">private</span> String gpu;</span><br><span class="line">    <span class="hljs-keyword">private</span> String mother_board;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCpu</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCpu</span><span class="hljs-params">(String cpu)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getGpu</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> gpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGpu</span><span class="hljs-params">(String gpu)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.gpu = gpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMother_board</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> mother_board;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMother_board</span><span class="hljs-params">(String MB)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.mother_board = MB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式之建造者模式&quot;&gt;&lt;a href=&quot;#设计模式之建造者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之建造者模式&quot;&gt;&lt;/a&gt;设计模式之建造者模式&lt;/h1&gt;&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>java_enum</title>
    <link href="http://blog.azero-ng.cn/java-enum.html"/>
    <id>http://blog.azero-ng.cn/java-enum.html</id>
    <published>2019-05-29T10:15:46.000Z</published>
    <updated>2019-08-04T09:03:18.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入剖析Java枚举类"><a href="#深入剖析Java枚举类" class="headerlink" title="深入剖析Java枚举类"></a>深入剖析Java枚举类</h1><ol><li>某个变量取值仅限于集合中的元素。此时，可将这些数据集合定义为枚举类型。</li><li>枚举类型是某类数据可能取值的集合</li><li>由于枚举类型是导出数据类型，因此，必须先定义枚举类型，然后再用枚举类型定义枚举型变量。 　</li><li>编译器编译程序时，会给枚举类型中的每一个元素指定一个整型常量值(也称为序号值)。</li><li>若枚举类型定义中没有指定元素的整型常量值，则整型常量值从0开始依次递增</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　&#123;red=<span class="hljs-number">5</span>,blue=<span class="hljs-number">1</span>,green,black,white,yellow&#125;;</span><br><span class="line">　　该定义规定red为<span class="hljs-number">5</span> ，blue为<span class="hljs-number">1</span>，其后元素值从<span class="hljs-number">2</span> 开始递增加<span class="hljs-number">1</span>。green、black、white、yellow的值依次为<span class="hljs-number">2</span>、<span class="hljs-number">3</span>、<span class="hljs-number">4</span>、<span class="hljs-number">5</span>。</span><br></pre></td></tr></table></figure><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ol><li>enum 与 class、interface 具有相同地位；</li><li>可以继承多个接口；</li><li>可以拥有构造器、成员方法、成员变量；</li><li>默认继承 java.lang.Enum 类，所以不能继承其他父类；</li><li>java.lang.Enum 类实现了 java.lang.Serializable 和 java.lang.Comparable 接口；</li><li>使用 enum 定义，默认使用 final 修饰，因此不能派生子类；</li><li>构造器默认使用 private 修饰，且只能使用 <strong>private 修饰</strong>；</li><li>枚举类所有实例必须在第一行给出，默认添加 public static final 修饰，否则无法产生实例；</li><li><strong>每个枚举类第一个都是实例成员.</strong>,实例实例 关联 单例模式,static修饰枚举类,instance</li></ol><h1 id="深入阅读参考链接"><a href="#深入阅读参考链接" class="headerlink" title="深入阅读参考链接"></a>深入阅读参考链接</h1><p><a href="https://h2pl.github.io/2018/05/02/javase15/" target="_blank" rel="noopener">https://h2pl.github.io/2018/05/02/javase15/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入剖析Java枚举类&quot;&gt;&lt;a href=&quot;#深入剖析Java枚举类&quot; class=&quot;headerlink&quot; title=&quot;深入剖析Java枚举类&quot;&gt;&lt;/a&gt;深入剖析Java枚举类&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;某个变量取值仅限于集合中的元素。此时，可将这些数据集合定
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Singleton</title>
    <link href="http://blog.azero-ng.cn/Singleton.html"/>
    <id>http://blog.azero-ng.cn/Singleton.html</id>
    <published>2019-05-28T01:10:04.000Z</published>
    <updated>2019-08-04T09:03:18.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java单例模式的不同写法（懒汉式、饿汉式、双检锁、静态内部类、枚举）"><a href="#Java单例模式的不同写法（懒汉式、饿汉式、双检锁、静态内部类、枚举）" class="headerlink" title="Java单例模式的不同写法（懒汉式、饿汉式、双检锁、静态内部类、枚举）"></a>Java单例模式的不同写法（懒汉式、饿汉式、双检锁、静态内部类、枚举）</h1><h2 id="单例模式优点"><a href="#单例模式优点" class="headerlink" title="单例模式优点"></a>单例模式优点</h2><ol><li><code>它能够避免实例对象的重复创建，不仅可以减少每次创建对象的时间开销，还可以节约内存空间；</code></li><li><code>能够避免由于操作多个实例导致的逻辑错误。</code></li><li><code>如果一个对象有可能贯穿整个应用程序，而且起到了全局统一管理控制的作用，那么单例模式也许是一个值得考虑的选择。</code></li></ol><p>总结：避免重复创建，节约时空消耗，适合全局统一管理</p><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">newInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>构造函数 private，其他类无法实例化</li><li>静态方法返回 实例</li><li>在类加载的时候就已经创建，整个程序周期存活</li><li>类加载时创建，避免多线程创建多实例，多线程同步问题</li><li>缺点，没被用到也会被创建（感觉问题不大啊）</li><li>适合情况: 单例对象占用内存小,初始化时就会被用到</li></ol><h2 id="懒汉模式-延迟加载"><a href="#懒汉模式-延迟加载" class="headerlink" title="懒汉模式- 延迟加载"></a>懒汉模式- 延迟加载</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">newInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> == instance)&#123;</span><br><span class="line">            instance = <span class="hljs-keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>需要的时候才去创建</li><li>单例对象创建成本高,使用次数少,按需创建</li><li>缺点:未考虑线程安全,加锁解决线程同步问题</li><li>synchronized</li></ol><h2 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h2><ol><li>加锁的懒汉模式,由于锁的存在,所以导致性能问题,</li><li>synchronized会导致比一般方法慢得多</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;   <span class="hljs-comment">// Single Checked</span></span><br><span class="line">            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// Double checked</span></span><br><span class="line">                    instance = <span class="hljs-keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>这代码很有想法</li><li>平时调用getInstance直接返回实例,不存在锁的问题</li><li>第一次调用,如果出现多线程,那么内部同步方法保证了依次执行</li><li>同事 同步方法内再次校验 实例是否创建,简直万无一失啊</li></ol><ul><li>双检锁隐患：</li><li>Java指令重排优化。在不改变原语义的情况下，通过调整指令的执行顺序让程序运行的更快</li><li>JVM未规定编译器优化相关的内容，所以<strong>JVM可以自由的进行指令重排序的优化</strong>。</li><li>instance = new Singleton() 并不是一个原子操作<ol><li>给 instance 分配内存</li><li>调用 Singleton 的构造函数来初始化成员变量</li><li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）</li></ol></li><li>由于第二三部不保证,所以如果出现  1-3-2,然后在3 执行完毕、2 未执行之前，被线程二抢占了,instance非null,导致线程二返回未初始化的Instance,就会报错</li></ul><h3 id="java-指令重排优化-的解决方案"><a href="#java-指令重排优化-的解决方案" class="headerlink" title="java 指令重排优化 的解决方案"></a>java 指令重排优化 的解决方案</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton instance;</span><br></pre></td></tr></table></figure><p>加入volatile</p><p>volatile特性:</p><ol><li>禁止指令重排化</li></ol><h2 id="静态内部类-优秀"><a href="#静态内部类-优秀" class="headerlink" title="静态内部类 优秀"></a>静态内部类 优秀</h2><ul><li>类加载机制来保证只创建一个instance实例。它与饿汉模式一样，也是利用了类加载机制，因此不存在多线程并发的问题。</li><li>内部类里面去创建对象实例。</li><li>只要应用中不使用内部类，JVM就不会去加载这个单例类，也就不会创建单例对象，从而实现懒汉式的延迟加载。也就是说这种方式<strong>可以同时保证延迟加载和线程安全</strong>。</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">newInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="enum单例模式"><a href="#enum单例模式" class="headerlink" title="enum单例模式"></a>enum单例模式</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnumSingleton</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">EnumSingleton</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EnumSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">enum</span> Singleton&#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        <span class="hljs-keyword">private</span> EnumSingleton singleton;</span><br><span class="line">        <span class="hljs-comment">//JVM会保证此方法绝对只调用一次</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="hljs-string">"Singleton 初始化"</span>);</span><br><span class="line">            singleton = <span class="hljs-keyword">new</span> EnumSingleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> EnumSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"main start"</span>);</span><br><span class="line">        EnumSingleton obj1 = getInstance();</span><br><span class="line">        EnumSingleton obj2 = getInstance();</span><br><span class="line">        <span class="hljs-comment">//输出结果：obj1==obj2?true</span></span><br><span class="line">        System.out.println(<span class="hljs-string">"obj1==obj2?"</span> + (obj1==obj2));</span><br><span class="line">        System.out.println(Singleton.INSTANCE.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//第一次调用 Singleton会导致构造函数执行,之后不会也就是jvm保证此方法绝对只调用一次</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>（1）饿汉式：线程安全</p><p>（2）懒汉式：非线程安全</p><p>（3）双检锁：线程安全</p><p>（4）静态内部类：线程安全</p><p>（5）枚举：线程安全</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ol><li><a href="http://chen-tao.github.io/2016/12/30/about-java-singleton/" target="_blank" rel="noopener">http://chen-tao.github.io/2016/12/30/about-java-singleton/</a></li><li><a href="https://blog.csdn.net/fly910905/article/details/79286680" target="_blank" rel="noopener">https://blog.csdn.net/fly910905/article/details/79286680</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java单例模式的不同写法（懒汉式、饿汉式、双检锁、静态内部类、枚举）&quot;&gt;&lt;a href=&quot;#Java单例模式的不同写法（懒汉式、饿汉式、双检锁、静态内部类、枚举）&quot; class=&quot;headerlink&quot; title=&quot;Java单例模式的不同写法（懒汉式、饿汉式、
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.azero-ng.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>csrf referer空绕过新思路</title>
    <link href="http://blog.azero-ng.cn/csrf-bypass-referer.html"/>
    <id>http://blog.azero-ng.cn/csrf-bypass-referer.html</id>
    <published>2019-05-11T10:24:29.000Z</published>
    <updated>2019-05-24T11:33:38.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="csrf-referer空绕过新思路"><a href="#csrf-referer空绕过新思路" class="headerlink" title="csrf referer空绕过新思路"></a>csrf referer空绕过新思路</h1><p>面试创宇被问到利用csrf过程中,如何使referer头部为空,脑中突然闪过一条新闻</p><blockquote><p>新浪微博图片增加referer校验,导致图床大面积失效</p></blockquote><p>记得当时一个解决办法是添加no referer这个html头,来达到referer空的目的.给面试官说了下思路.面试完抓紧测一波.</p><h1 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h1><h2 id="直接csrf含有-referer代码"><a href="#直接csrf含有-referer代码" class="headerlink" title="直接csrf含有 referer代码"></a>直接csrf含有 referer代码</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文档标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraasdfph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://blog.azero-ng.cn"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果如下:果然有referer头部</p><p><img src="/image/csrf-bypass-referer/referer.png" alt></p><h2 id="头部添加meta"><a href="#头部添加meta" class="headerlink" title="头部添加meta"></a>头部添加meta</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文档标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"referrer"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"no-referrer"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraasdfph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://blog.azero-ng.cn"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>referer头部消失了</p><p><img src="/image/csrf-bypass-referer/head.png" alt></p><h2 id="元素添加-referrerPolicy-”no-referrer”"><a href="#元素添加-referrerPolicy-”no-referrer”" class="headerlink" title="元素添加 referrerPolicy=”no-referrer”"></a>元素添加 referrerPolicy=”no-referrer”</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文档标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraasdfph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://blog3.azero-ng.cn"</span> <span class="hljs-attr">referrerPolicy</span>=<span class="hljs-string">"no-referrer"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>referer 头部消失</p><p><img src="/image/csrf-bypass-referer/line.png" alt></p><p>注意，元素添加取消referer参数，网上有多种写法，但是有的无法成功，目前使用的，是mdn官方推荐，并已在chrome 74 测试通过。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>MDN 官方文档对 <strong>head  Referrer-Policy</strong> 的介绍，强烈推荐阅读</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy</a></p><p>MDN官方文档 对图像元素referrerPolicy（HTMLImageElement.referrerPolicy）的介绍，强烈推荐</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy#Browser_compatibility" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy#Browser_compatibility</a></p><p>不错的文章</p><p><a href="https://juejin.im/entry/5adaa72c6fb9a07aa43bc665" target="_blank" rel="noopener">https://juejin.im/entry/5adaa72c6fb9a07aa43bc665</a></p><p>有点老了，不太推荐</p><p><a href="https://imququ.com/post/referrer-policy.html" target="_blank" rel="noopener">https://imququ.com/post/referrer-policy.html</a></p><p>csrf绕过技巧</p><p><a href="https://zhuanlan.zhihu.com/p/50619269" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/50619269</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;csrf-referer空绕过新思路&quot;&gt;&lt;a href=&quot;#csrf-referer空绕过新思路&quot; class=&quot;headerlink&quot; title=&quot;csrf referer空绕过新思路&quot;&gt;&lt;/a&gt;csrf referer空绕过新思路&lt;/h1&gt;&lt;p&gt;面试创宇被问
      
    
    </summary>
    
      <category term="安全" scheme="http://blog.azero-ng.cn/categories/%E5%AE%89%E5%85%A8/"/>
    
      <category term="web" scheme="http://blog.azero-ng.cn/categories/%E5%AE%89%E5%85%A8/web/"/>
    
      <category term="csrf" scheme="http://blog.azero-ng.cn/categories/%E5%AE%89%E5%85%A8/web/csrf/"/>
    
    
  </entry>
  
  <entry>
    <title>firewalld下不同网卡端口转发</title>
    <link href="http://blog.azero-ng.cn/firewalld%E4%B8%8B%E4%B8%8D%E5%90%8C%E7%BD%91%E5%8D%A1%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91.html"/>
    <id>http://blog.azero-ng.cn/firewalld下不同网卡端口转发.html</id>
    <published>2019-05-07T01:03:03.000Z</published>
    <updated>2019-05-25T04:12:36.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="firewalld-原生端口转发-不支持不同网卡间转发"><a href="#firewalld-原生端口转发-不支持不同网卡间转发" class="headerlink" title="firewalld 原生端口转发(不支持不同网卡间转发)"></a>firewalld 原生端口转发(不支持不同网卡间转发)</h1><p>先说一下环境: </p><ol><li>本机ip 202.112.159.24</li><li>需要把本机的80端口转发到本机的8080端口</li><li>需要把本机的443端口转发到同网卡202.112.159.33的443端口</li></ol><h2 id="首先允许端口进入-firewalld"><a href="#首先允许端口进入-firewalld" class="headerlink" title="首先允许端口进入 firewalld"></a>首先允许端口进入 firewalld</h2><p>firewall-cmd –permanent –zone=public –add-port=8080/tcp</p><h2 id="允许防火墙伪装ip"><a href="#允许防火墙伪装ip" class="headerlink" title="允许防火墙伪装ip"></a>允许防火墙伪装ip</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-masquerade --permanent</span><br></pre></td></tr></table></figure><p>–add-masquerade:我的理解是 在 端口转发的时候把源包的来源地址更改为本机ip地址(iptables 自动获取本机ip)</p><p>premanent选项是永久添加规则,但是不会立即生效,需要reload</p><p>## </p><h1 id="firewalld-下使用iptables-双网卡-端口转发"><a href="#firewalld-下使用iptables-双网卡-端口转发" class="headerlink" title="firewalld 下使用iptables 双网卡 端口转发"></a>firewalld 下使用iptables 双网卡 端口转发</h1><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -I PREROUTING -p tcp -m tcp --dport 9001 -j DNAT --to-destination 192.168.122.10:22</span><br><span class="line">iptables -t nat -I POSTROUTING -d 192.168.122.10 -p tcp -m tcp --dport 22 -j MASQUERADE</span><br><span class="line">iptables -t filter -I FORWARD -o virbr0 -d 192.168.122.10 -p tcp -m tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -I PREROUTING -p tcp -m tcp --dport 9002 -j DNAT --to-destination 192.168.122.10:22</span><br><span class="line">iptables -t nat -I POSTROUTING -d 192.168.122.10 -p tcp -m tcp --dport 22 -j MASQUERADE</span><br><span class="line">iptables -t filter -I FORWARD -o virbr0 -d 192.168.122.10 -p tcp -m tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><h2 id="firewalld-direct"><a href="#firewalld-direct" class="headerlink" title="firewalld direct"></a>firewalld direct</h2><p>built_in表竟然是加到了*_direct表里,有毛用,放弃firewalld了</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --direct --add-rule ipv4 nat PREROUTING 0 -p tcp -m tcp --dport 9001 -j DNAT --to-destination 192.168.122.10:22</span><br><span class="line">firewall-cmd --permanent --direct --add-rule ipv4 nat POSTROUTING 0 -d 192.168.122.10 -p tcp -m tcp --dport 22 -j MASQUERADE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">firewall-cmd --permanent --direct --add-rule ipv4 filter FORWARD 0 -o virbr0 -d 192.168.122.10 -p tcp -m tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><h1 id="改用iptables"><a href="#改用iptables" class="headerlink" title="改用iptables"></a>改用iptables</h1><h2 id="删除firewalld"><a href="#删除firewalld" class="headerlink" title="删除firewalld"></a>删除firewalld</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">停止firewalld服务</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">禁用firewalld服务</span></span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></table></figure><h2 id="安装-iptables"><a href="#安装-iptables" class="headerlink" title="安装 iptables"></a>安装 iptables</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">先检查是否安装了iptables</span></span><br><span class="line">service iptables status</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">安装iptables</span></span><br><span class="line">yum install -y iptables</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">升级iptables</span></span><br><span class="line">yum update iptables </span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">安装iptables-services</span></span><br><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure><h2 id="删除所有规则"><a href="#删除所有规则" class="headerlink" title="删除所有规则"></a>删除所有规则</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -F  </span><br><span class="line"> </span><br><span class="line">iptables -t nat -X  </span><br><span class="line"> </span><br><span class="line">iptables -t nat -P PREROUTING ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -t nat -P POSTROUTING ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -t nat -P OUTPUT ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -t mangle -F  </span><br><span class="line"> </span><br><span class="line">iptables -t mangle -X  </span><br><span class="line"> </span><br><span class="line">iptables -t mangle -P PREROUTING ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -t mangle -P INPUT ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -t mangle -P FORWARD ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -t mangle -P OUTPUT ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -t mangle -P POSTROUTING ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -F  </span><br><span class="line"> </span><br><span class="line">iptables -X  </span><br><span class="line"> </span><br><span class="line">iptables -P FORWARD ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -P INPUT ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -P OUTPUT ACCEPT  </span><br><span class="line"> </span><br><span class="line">iptables -t raw -F</span><br><span class="line">iptables -t raw -X</span><br><span class="line">iptables -t raw -P PREROUTING ACCEPT</span><br><span class="line">iptables -t raw -P OUTPUT ACCEPT</span><br></pre></td></tr></table></figure><h2 id="设置规则"><a href="#设置规则" class="headerlink" title="设置规则"></a>设置规则</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">测试</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">iptables -A INPUT -m <span class="hljs-built_in">set</span> --match-set bjtu src -j DROP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp -m multiport --sports 80,443 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><h2 id="nginx-反向代理-允许-80-443端口"><a href="#nginx-反向代理-允许-80-443端口" class="headerlink" title="nginx 反向代理 允许 80 443端口"></a>nginx 反向代理 允许 80 443端口</h2><p>开启22,80,443</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 重要重要优先 22端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22  -m set --match-set bjtu src -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22  -m set --match-set bjtu src -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"><span class="hljs-comment"># 允许来自guest的返回</span></span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">抛弃该种方式,采用ipset</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">iptables -A INPUT -p tcp -s 192.168.122.10 -j ACCEPT</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">iptables -A INPUT -p tcp -s 192.168.122.12 -j ACCEPT</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">iptables -A OUTPUT -p tcp -d 192.168.122.10 -j ACCEPT</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">iptables -A OUTPUT -p tcp -d 192.168.122.12 -j ACCEPT</span></span><br><span class="line">iptables -A INPUT -m set --match-set kvm_guest src -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -m set --match-set kvm_guest src -j ACCEPT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">ipables <span class="hljs-built_in">log</span>功能</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">iptables -A INPUT -j LOG --<span class="hljs-built_in">log</span>-prefix <span class="hljs-string">"INPUT:DROP:"</span> --<span class="hljs-built_in">log</span>-level 6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"><span class="hljs-comment"># 允许80,443端口访问</span></span></span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp -m multiport --sports 80,443 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">允许ping</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">iptables -A INPUT -p icmp --icmp-type <span class="hljs-built_in">echo</span>-request -j ACCEPT</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">iptables -A OUTPUT -p icmp --icmp-type <span class="hljs-built_in">echo</span>-reply -j ACCEPT</span></span><br><span class="line">iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">允许dns</span></span><br><span class="line">iptables -A INPUT -p udp -m udp --sport 53 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">配置端口转发</span></span><br><span class="line">iptables -t nat -I PREROUTING  -p tcp -m tcp --dport 9001 -m set --match-set bjtu src -j DNAT --to-destination 192.168.122.10:22</span><br><span class="line">iptables -t nat -I POSTROUTING -d 192.168.122.10 -p tcp -m tcp --dport 22 -m set --match-set bjtu src -j MASQUERADE</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 最后添加默认规则</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT DROP</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">iptables -P FORWARD DROP</span></span><br></pre></td></tr></table></figure><h1 id="iptables-默认表-filter"><a href="#iptables-默认表-filter" class="headerlink" title="iptables 默认表 filter"></a>iptables 默认表 filter</h1><h1 id="iptables-禁用dhcp导致-kvm-ssh-无法访问"><a href="#iptables-禁用dhcp导致-kvm-ssh-无法访问" class="headerlink" title="iptables 禁用dhcp导致 kvm ssh 无法访问"></a>iptables 禁用dhcp导致 kvm ssh 无法访问</h1><p>临时解决办法</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p udp -s 192.168.122.10 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp -s 192.168.122.11 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp -s 192.168.122.12 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p udp -d 192.168.122.10 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p udp -d 192.168.122.11 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p udp -d 192.168.122.12 -j ACCEPT</span><br></pre></td></tr></table></figure><p>优化使用ipset</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ipset -N kvm_guest nethash</span><br><span class="line">ipset add kvm_guest 192.168.122.1/24</span><br><span class="line"></span><br><span class="line">iptables -A INPUT -m set --match-set kvm_guest src -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -m set --match-set kvm_guest src -j ACCEPT</span><br></pre></td></tr></table></figure><p>草稿</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p udp -m udp --sport 53 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iptables -t filter -A INPUT -p dhcp -j ACCEPT</span><br><span class="line">iptables -t filter -A OUTPUT -p dhcp -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -t filter -A INPUT -p icmp -j ACCEPT</span><br><span class="line">iptables -t filter -A OUTPUT -p icmp -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables  -I INPUT -p udp --dport 67:68 --sport 67:68 -j ACCEPT</span><br><span class="line">iptables  -I OUTPUT -p udp --dport 67:68 --sport 67:68 -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -A INPUT -p udp -s 192.168.122.10 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp -s 192.168.122.12 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p udp -d 192.168.122.10 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p udp -d 192.168.122.12 -j ACCEPT</span><br></pre></td></tr></table></figure><h1 id="iptables-禁用icmp会导致"><a href="#iptables-禁用icmp会导致" class="headerlink" title="iptables 禁用icmp会导致"></a>iptables 禁用icmp会导致</h1><p>sendmsg:     Operation not permitted</p><h1 id="收尾阶段"><a href="#收尾阶段" class="headerlink" title="收尾阶段"></a>收尾阶段</h1><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash">ip <span class="hljs-built_in">set</span>持久化</span></span><br><span class="line"></span><br><span class="line">systemctl enable iptabels</span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><h2 id="tcpdump用法"><a href="#tcpdump用法" class="headerlink" title="tcpdump用法"></a>tcpdump用法</h2><p><a href="https://linuxwiki.github.io/NetTools/tcpdump.html" target="_blank" rel="noopener">tcpdump用法</a></p><p><a href="https://www.jianshu.com/p/ed001ae61c58" target="_blank" rel="noopener">Linux之iptables详解及tcpdump</a></p><h2 id="iptables-入门"><a href="#iptables-入门" class="headerlink" title="iptables 入门"></a>iptables 入门</h2><p><a href="http://www.frozentux.net/iptables-tutorial/images/tables_traverse.jpg" target="_blank" rel="noopener">iptables非常容易理解的结构图</a></p><p><a href="https://wiki.archlinux.org/index.php/Iptables_(简体中文" target="_blank" rel="noopener">arch wiki 讲得不错,入门可以,但是不全</a>)</p><p><a href="https://www.jianshu.com/p/ed001ae61c58" target="_blank" rel="noopener">Linux之iptables详解及tcpdump,非常全</a></p><p><a href="https://www.unixso.com/Linux/iptables.html" target="_blank" rel="noopener">常见iptables使用规则场景整理</a></p><p><a href="http://blog.51yip.com/linux/1404.html" target="_blank" rel="noopener">ptables 添加，删除，查看，修改</a></p><h2 id="iptables-端口转发"><a href="#iptables-端口转发" class="headerlink" title="iptables 端口转发"></a>iptables 端口转发</h2><p><a href="https://blog.csdn.net/zzhongcy/article/details/42738285" target="_blank" rel="noopener">linux下用iptables做本机端口转发方法</a></p><p><a href="https://www.hitsword.org/2018/165.html" target="_blank" rel="noopener">Centos 6 + iptables 作为网关NAT转发、端口转发笔记</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;firewalld-原生端口转发-不支持不同网卡间转发&quot;&gt;&lt;a href=&quot;#firewalld-原生端口转发-不支持不同网卡间转发&quot; class=&quot;headerlink&quot; title=&quot;firewalld 原生端口转发(不支持不同网卡间转发)&quot;&gt;&lt;/a&gt;fire
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.azero-ng.cn/categories/linux/"/>
    
      <category term="防火墙" scheme="http://blog.azero-ng.cn/categories/linux/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
    
  </entry>
  
  <entry>
    <title>git_pre_commit</title>
    <link href="http://blog.azero-ng.cn/git-pre-commit.html"/>
    <id>http://blog.azero-ng.cn/git-pre-commit.html</id>
    <published>2019-05-06T13:43:38.000Z</published>
    <updated>2019-05-07T00:40:10.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-pre-commit-钩子在HEXO的使用"><a href="#git-pre-commit-钩子在HEXO的使用" class="headerlink" title="git pre commit 钩子在HEXO的使用"></a>git pre commit 钩子在HEXO的使用</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── public</span><br><span class="line">├── source</span><br><span class="line">└── themes</span><br><span class="line">    ├── icarus</span><br><span class="line">    │   └── _config.yml</span><br><span class="line">    └── icarus.yml</span><br></pre></td></tr></table></figure><p>hexo 目录结构如上,hexo 根目录已初始化为git项目,icarus为子模块.出于更新,pull考虑,<strong>icarus</strong>项目没有把icarus</p><p>的配置文件_config.yml放到git中.但是由于icarus为子模块,所以主模块也无法add icarus的配置文件.但是为了保存icarus的配置文件,我们必须要添加到git中,以方便同步和备份</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>在theme目录下备份 _config.yml 为icarus.yml</p></li><li><p>添加pre commit hook</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span>!/bin/sh</span><br><span class="line"></span><br><span class="line">if ! diff themes/icarus.yml themes/icarus/_config.yml &amp;&gt; /dev/null ; </span><br><span class="line">then</span><br><span class="line">    cp themes/icarus/_config.yml themes/icarus.yml</span><br><span class="line">    git add themes/icarus.yml</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>每次commit的时候都会检查_config.yml是否改变,改变则更新icarus.yml 并add</p></li><li><p>最终每次commit都可以保证配置文件的更新</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-pre-commit-钩子在HEXO的使用&quot;&gt;&lt;a href=&quot;#git-pre-commit-钩子在HEXO的使用&quot; class=&quot;headerlink&quot; title=&quot;git pre commit 钩子在HEXO的使用&quot;&gt;&lt;/a&gt;git pre com
      
    
    </summary>
    
      <category term="开发" scheme="http://blog.azero-ng.cn/categories/%E5%BC%80%E5%8F%91/"/>
    
      <category term="git" scheme="http://blog.azero-ng.cn/categories/%E5%BC%80%E5%8F%91/git/"/>
    
    
  </entry>
  
  <entry>
    <title>archlinux_transparent_proxy</title>
    <link href="http://blog.azero-ng.cn/archlinux-transparent-proxy.html"/>
    <id>http://blog.azero-ng.cn/archlinux-transparent-proxy.html</id>
    <published>2019-04-30T12:05:58.000Z</published>
    <updated>2019-05-07T00:40:10.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arch-linux-v2ray-透明代理"><a href="#Arch-linux-v2ray-透明代理" class="headerlink" title="Arch linux v2ray 透明代理"></a>Arch linux v2ray 透明代理</h1><p>本文适用对象:PC翻墙(和网关翻墙相对),linux系统,v2ray</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>linux系统全局走代理,而不仅仅是浏览器,这样git,pip,wget,telegram等等都能得到加速</li></ol><h2 id="总体框架"><a href="#总体框架" class="headerlink" title="总体框架"></a>总体框架</h2><p>服务端: nginx+v2ray</p><p>客户端: iptables+dnsmasq+v2ray</p><p>协议: WebSocket+TLS+Web(伪装能力MAX)</p><h2 id="服务器配置-看官方文档-不是本文重点-以后可能会写"><a href="#服务器配置-看官方文档-不是本文重点-以后可能会写" class="headerlink" title="服务器配置,看官方文档,不是本文重点,以后可能会写"></a>服务器配置,看官方文档,不是本文重点,以后可能会写</h2><h2 id="透明代理配置"><a href="#透明代理配置" class="headerlink" title="透明代理配置"></a>透明代理配置</h2><h3 id="v2ray-inbounds配置"><a href="#v2ray-inbounds配置" class="headerlink" title="v2ray inbounds配置"></a>v2ray inbounds配置</h3><ol><li>port:v2ray为iptables监听的端口,iptables的流量会转到这来</li></ol><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"port"</span>: <span class="hljs-number">12345</span>,</span><br><span class="line">  <span class="hljs-attr">"listen"</span>: <span class="hljs-string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"dokodemo-door"</span>,</span><br><span class="line">  <span class="hljs-attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"network"</span>: <span class="hljs-string">"tcp,udp"</span>,</span><br><span class="line">    <span class="hljs-attr">"followRedirect"</span>: <span class="hljs-literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-attr">"sniffing"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"enabled"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">    <span class="hljs-attr">"destOverride"</span>: [<span class="hljs-string">"http"</span>, <span class="hljs-string">"tls"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v2ray-路由配置"><a href="#v2ray-路由配置" class="headerlink" title="v2ray 路由配置"></a>v2ray 路由配置</h3><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">"routing": &#123;</span><br><span class="line">   "domainStrategy": "IPIfNonMatch",</span><br><span class="line">   "rules": [</span><br><span class="line">     &#123;//dns协议走dns-out出,下文dns配置会用到</span><br><span class="line">       "type": "field",</span><br><span class="line">       "inboundTag": ["dns-in"],</span><br><span class="line">       "outboundTag": "dns-out"</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;//外网dns走代理,防污染</span><br><span class="line">       "type": "field",</span><br><span class="line">       "outboundTag": "proxy",</span><br><span class="line">       "ip": [</span><br><span class="line">         "1.1.1.1",</span><br><span class="line">         <span class="hljs-string">"8.8.8.8"</span></span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;//广告域名屏蔽,ps:有部分域名误判</span><br><span class="line">       "type": "field",</span><br><span class="line">       "domain": ["geosite:category-ads"],</span><br><span class="line">       "outboundTag": "blocked"</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;//国内域名直连</span><br><span class="line">       "type": "field",</span><br><span class="line">       "outboundTag": "direct",</span><br><span class="line">       "domain": ["geosite:cn"]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;//国内ip直连</span><br><span class="line">       "type": "field",</span><br><span class="line">       "outboundTag": "direct",</span><br><span class="line">       "ip": [</span><br><span class="line">         "geoip:cn",</span><br><span class="line">         <span class="hljs-string">"geoip:private"</span></span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">   "strategy": "rules"</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h3 id="V2ray-outbounds配置"><a href="#V2ray-outbounds配置" class="headerlink" title="V2ray outbounds配置"></a>V2ray outbounds配置</h3><ol><li><p>在所有的outbounds中的”streamSettings”添加</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">"sockopt": &#123;</span><br><span class="line">  "mark": 255  //这里是 SO_MARK，用于 iptables 识别，每个 outbound 都要配置；255可以改成其他数值，但要与下面的 iptables 规则对应；如果有多个 outbound，最好奖所有 outbound 的 SO_MARK 都设置成一样的数值</span><br></pre></td></tr></table></figure></li></ol><h3 id="iptables设置"><a href="#iptables设置" class="headerlink" title="iptables设置"></a>iptables设置</h3><ol><li><p>网关设备开启 IP 转发。在 /etc/sysctl.conf 文件添加一行 net.ipv4.ip_forward=1 ，执行下列命令生效：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li><li><p>设定 TCP 透明代理的 iptables 规则，命令如下(<code>#</code>代表注释)：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -N V2RAY # 新建一个名为 V2RAY 的链</span><br><span class="line">iptables -t nat -A V2RAY -d 127.0.0.1/32 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 192.168.0.0/16 -j RETURN # 直连 192.168.0.0/16 </span><br><span class="line">iptables -t nat -A V2RAY -p tcp -j RETURN -m mark --mark 0xff # 直连 SO_MARK 为 0xff 的流量(0xff 是 16 进制数，数值上等同与上面配置的 255)，此规则目的是避免代理本机(网关)流量出现回环问题</span><br><span class="line">iptables -t nat -A V2RAY -p tcp -j REDIRECT --to-ports 12345 # 其余流量转发到 12345 端口（即 V2Ray）</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -j V2RAY # 对本机进行透明代理</span><br></pre></td></tr></table></figure></li><li><p>不建议设置udp全局代理,我个人目前还没有遇到需要udp代理的情况,但是开启udp代理可能会对本机造成一些影响</p><ol><li>docker node dns解析失败(待验证,目前知道的情况是 docker也用到了iptables可能和v2ray的udp全局产生了冲突)</li></ol></li></ol><h3 id="至此本机应该可以实现透明代理了-但是dns解析还有问题"><a href="#至此本机应该可以实现透明代理了-但是dns解析还有问题" class="headerlink" title="至此本机应该可以实现透明代理了,但是dns解析还有问题"></a>至此本机应该可以实现透明代理了,但是dns解析还有问题</h3><h2 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h2><p>由于dns污染的存在,即使ip可以透明代理,本机也无法正常上网.</p><h3 id="v2ray-inbounds-添加dns接口"><a href="#v2ray-inbounds-添加dns接口" class="headerlink" title="v2ray inbounds 添加dns接口"></a>v2ray inbounds 添加dns接口</h3><p>至于每个配置到底是啥意思,请看官方文档,官方文档写的非常不错</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      "port": 54,//端口可以填53,直接把v2ray作为dns解析,但是v2ray dns存在缺点,所以为了和dnsmasq配合,使用了54端口</span><br><span class="line">      "tag": "dns-in",</span><br><span class="line">      "protocol": "dokodemo-door",</span><br><span class="line">      "settings": &#123;</span><br><span class="line">        "address": "1.1.1.1",</span><br><span class="line">        "port": 53,</span><br><span class="line">        "network": "tcp,udp"</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v2ray-outbounds-添加dns出口"><a href="#v2ray-outbounds-添加dns出口" class="headerlink" title="v2ray outbounds 添加dns出口"></a>v2ray outbounds 添加dns出口</h3><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="hljs-attr">"tag"</span>: <span class="hljs-string">"dns-out"</span>,</span><br><span class="line">   <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"dns"</span>,</span><br><span class="line">   <span class="hljs-attr">"settings"</span>: &#123;</span><br><span class="line">     <span class="hljs-attr">"network"</span>: <span class="hljs-string">"tcp"</span>,</span><br><span class="line">     <span class="hljs-attr">"address"</span>: <span class="hljs-string">"1.1.1.1"</span>,</span><br><span class="line">     <span class="hljs-attr">"port"</span>: <span class="hljs-number">53</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="v2ray-dns模块"><a href="#v2ray-dns模块" class="headerlink" title="v2ray dns模块"></a>v2ray dns模块</h3><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  "dns": &#123;</span><br><span class="line">    "hosts": &#123;//hosts</span><br><span class="line">      "domain:v2ray.com": "www.vicemc.net",</span><br><span class="line">      "domain:github.io": "pages.github.com",</span><br><span class="line">      "domain:wikipedia.org": "www.wikimedia.org",</span><br><span class="line">      "domain:shadowsocks.org": "electronicsrealm.com"</span><br><span class="line">    &#125;,</span><br><span class="line">    "servers": [</span><br><span class="line">      "1.1.1.1",</span><br><span class="line">      &#123;//国内域名走114</span><br><span class="line">        "address": "114.114.114.114",</span><br><span class="line">        "port": 53,</span><br><span class="line">        "domains": [</span><br><span class="line">          <span class="hljs-string">"geosite:cn"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      "8.8.8.8",</span><br><span class="line">      <span class="hljs-string">"localhost"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  "policy": &#123;</span><br><span class="line">    "levels": &#123;</span><br><span class="line">      "0": &#123;</span><br><span class="line">        "uplinkOnly": 0,</span><br><span class="line">        "downlinkOnly": 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "system": &#123;</span><br><span class="line">      "statsInboundUplink": false,</span><br><span class="line">      "statsInboundDownlink": false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "other": &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="至此dns已经可以用了"><a href="#至此dns已经可以用了" class="headerlink" title="至此dns已经可以用了"></a>至此dns已经可以用了</h3><p>到这,dns污染问题已经解决了,可以通过如下命令检测</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @127.0.0.1 -p 54 www.google.com</span><br></pre></td></tr></table></figure><p>但是正如v2ray文档所言,v2ray 内建dns支持A,AAAA方式的域名,所以会出现部分域名无法解析的情况</p><p>下面的这个域名采用soa方式,v2ray就无法解析了,两条命令的结果对比一下就可以看到了</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dig @8.8.8.8 gowdb.in</span><br><span class="line">dig @127.0.0.1 -p 54 gowdb.in</span><br></pre></td></tr></table></figure><p>下面就要dnsmasq出场了,其实v2ray可以把dns再完善完善,这样就v2ray就完美了.有志青年们可以搞搞go啊,完善v2ray,再弄个kunlikunli,嘿嘿嘿嘿.</p><h3 id="dnsmasq出场"><a href="#dnsmasq出场" class="headerlink" title="dnsmasq出场"></a>dnsmasq出场</h3><p>总体设想:dnsmasq,gfw域名走v2ray解析,其他域名走114</p><p>引入轮子:<a href="https://github.com/cokebar/gfwlist2dnsmasq" target="_blank" rel="noopener">https://github.com/cokebar/gfwlist2dnsmasq</a></p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#别想着复制代码,自己clone下来,执行</span></span><br><span class="line"><span class="hljs-comment">#/etc/dnsmasq.d 没有这个文件夹的</span></span><br><span class="line"><span class="hljs-comment">#sudo mkdir /etc/dnsmasq.d</span></span><br><span class="line">sudo sh gfwlist2dnsmasq.sh -d 127.0.0.1 -p 54 -o /etc/dnsmasq.d/gfw.conf</span><br></pre></td></tr></table></figure><p>接着在/etc/dnsmasq.conf最后添加</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server=117.50.11.11</span><br><span class="line">server=117.50.22.22</span><br><span class="line">conf-dir=/etc/dnsmasq.d</span><br></pre></td></tr></table></figure><p>server可以填自己喜欢的dns</p><p>至此 dns已经完美了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Arch-linux-v2ray-透明代理&quot;&gt;&lt;a href=&quot;#Arch-linux-v2ray-透明代理&quot; class=&quot;headerlink&quot; title=&quot;Arch linux v2ray 透明代理&quot;&gt;&lt;/a&gt;Arch linux v2ray 透明代理&lt;/
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.azero-ng.cn/categories/linux/"/>
    
    
  </entry>
  
</feed>
