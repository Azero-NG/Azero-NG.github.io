{"pages":[{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"archlinux_transparent_proxy","text":"Arch linux v2ray 透明代理本文适用对象:PC翻墙(和网关翻墙相对),linux系统,v2ray 优点 linux系统全局走代理,而不仅仅是浏览器,这样git,pip,wget,telegram等等都能得到加速 总体框架服务端: nginx+v2ray 客户端: iptables+dnsmasq+v2ray 协议: WebSocket+TLS+Web(伪装能力MAX) 服务器配置,看官方文档,不是本文重点,以后可能会写透明代理配置v2ray inbounds配置 port:v2ray为iptables监听的端口,iptables的流量会转到这来 12345678910111213{ \"port\": 12345, \"listen\": \"127.0.0.1\", \"protocol\": \"dokodemo-door\", \"settings\": { \"network\": \"tcp,udp\", \"followRedirect\": true }, \"sniffing\": { \"enabled\": true, \"destOverride\": [\"http\", \"tls\"] }} v2ray 路由配置12345678910111213141516171819202122232425262728293031323334353637\"routing\": { \"domainStrategy\": \"IPIfNonMatch\", \"rules\": [ {//dns协议走dns-out出,下文dns配置会用到 \"type\": \"field\", \"inboundTag\": [\"dns-in\"], \"outboundTag\": \"dns-out\" }, {//外网dns走代理,防污染 \"type\": \"field\", \"outboundTag\": \"proxy\", \"ip\": [ \"1.1.1.1\", \"8.8.8.8\" ] }, {//广告域名屏蔽,ps:有部分域名误判 \"type\": \"field\", \"domain\": [\"geosite:category-ads\"], \"outboundTag\": \"blocked\" }, {//国内域名直连 \"type\": \"field\", \"outboundTag\": \"direct\", \"domain\": [\"geosite:cn\"] }, {//国内ip直连 \"type\": \"field\", \"outboundTag\": \"direct\", \"ip\": [ \"geoip:cn\", \"geoip:private\" ] } ], \"strategy\": \"rules\" }, V2ray outbounds配置 在所有的outbounds中的”streamSettings”添加 123 \"sockopt\": { \"mark\": 255 //这里是 SO_MARK，用于 iptables 识别，每个 outbound 都要配置；255可以改成其他数值，但要与下面的 iptables 规则对应；如果有多个 outbound，最好奖所有 outbound 的 SO_MARK 都设置成一样的数值 iptables设置 网关设备开启 IP 转发。在 /etc/sysctl.conf 文件添加一行 net.ipv4.ip_forward=1 ，执行下列命令生效： 1sysctl -p 设定 TCP 透明代理的 iptables 规则，命令如下(#代表注释)： 123456iptables -t nat -N V2RAY # 新建一个名为 V2RAY 的链iptables -t nat -A V2RAY -d 127.0.0.1/32 -j RETURNiptables -t nat -A V2RAY -d 192.168.0.0/16 -j RETURN # 直连 192.168.0.0/16 iptables -t nat -A V2RAY -p tcp -j RETURN -m mark --mark 0xff # 直连 SO_MARK 为 0xff 的流量(0xff 是 16 进制数，数值上等同与上面配置的 255)，此规则目的是避免代理本机(网关)流量出现回环问题iptables -t nat -A V2RAY -p tcp -j REDIRECT --to-ports 12345 # 其余流量转发到 12345 端口（即 V2Ray）iptables -t nat -A OUTPUT -p tcp -j V2RAY # 对本机进行透明代理 不建议设置udp全局代理,我个人目前还没有遇到需要udp代理的情况,但是开启udp代理可能会对本机造成一些影响 docker node dns解析失败(待验证,目前知道的情况是 docker也用到了iptables可能和v2ray的udp全局产生了冲突) 至此本机应该可以实现透明代理了,但是dns解析还有问题DNS配置由于dns污染的存在,即使ip可以透明代理,本机也无法正常上网. v2ray inbounds 添加dns接口至于每个配置到底是啥意思,请看官方文档,官方文档写的非常不错 12345678910{ \"port\": 54,//端口可以填53,直接把v2ray作为dns解析,但是v2ray dns存在缺点,所以为了和dnsmasq配合,使用了54端口 \"tag\": \"dns-in\", \"protocol\": \"dokodemo-door\", \"settings\": { \"address\": \"1.1.1.1\", \"port\": 53, \"network\": \"tcp,udp\" }} v2ray outbounds 添加dns出口123456789{ \"tag\": \"dns-out\", \"protocol\": \"dns\", \"settings\": { \"network\": \"tcp\", \"address\": \"1.1.1.1\", \"port\": 53 } } v2ray dns模块1234567891011121314151617181920212223242526272829303132333435 \"dns\": { \"hosts\": {//hosts \"domain:v2ray.com\": \"www.vicemc.net\", \"domain:github.io\": \"pages.github.com\", \"domain:wikipedia.org\": \"www.wikimedia.org\", \"domain:shadowsocks.org\": \"electronicsrealm.com\" }, \"servers\": [ \"1.1.1.1\", {//国内域名走114 \"address\": \"114.114.114.114\", \"port\": 53, \"domains\": [ \"geosite:cn\" ] }, \"8.8.8.8\", \"localhost\" ] }, \"policy\": { \"levels\": { \"0\": { \"uplinkOnly\": 0, \"downlinkOnly\": 0 } }, \"system\": { \"statsInboundUplink\": false, \"statsInboundDownlink\": false } }, \"other\": {}} 至此dns已经可以用了到这,dns污染问题已经解决了,可以通过如下命令检测 1dig @127.0.0.1 -p 54 www.google.com 但是正如v2ray文档所言,v2ray 内建dns支持A,AAAA方式的域名,所以会出现部分域名无法解析的情况 下面的这个域名采用soa方式,v2ray就无法解析了,两条命令的结果对比一下就可以看到了 12dig @8.8.8.8 gowdb.indig @127.0.0.1 -p 54 gowdb.in 下面就要dnsmasq出场了,其实v2ray可以把dns再完善完善,这样就v2ray就完美了.有志青年们可以搞搞go啊,完善v2ray,再弄个kunlikunli,嘿嘿嘿嘿. dnsmasq出场总体设想:dnsmasq,gfw域名走v2ray解析,其他域名走114 引入轮子:https://github.com/cokebar/gfwlist2dnsmasq 1234#别想着复制代码,自己clone下来,执行#/etc/dnsmasq.d 没有这个文件夹的#sudo mkdir /etc/dnsmasq.dsudo sh gfwlist2dnsmasq.sh -d 127.0.0.1 -p 54 -o /etc/dnsmasq.d/gfw.conf 接着在/etc/dnsmasq.conf最后添加 123server=117.50.11.11server=117.50.22.22conf-dir=/etc/dnsmasq.d server可以填自己喜欢的dns 至此 dns已经完美了","link":"/archlinux-transparent-proxy.html"},{"title":"git_pre_commit","text":"git pre commit 钩子在HEXO的使用需求分析1234567.├── public├── source└── themes ├── icarus │ └── _config.yml └── icarus.yml hexo 目录结构如上,hexo 根目录已初始化为git项目,icarus为子模块.出于更新,pull考虑,icarus项目没有把icarus 的配置文件_config.yml放到git中.但是由于icarus为子模块,所以主模块也无法add icarus的配置文件.但是为了保存icarus的配置文件,我们必须要添加到git中,以方便同步和备份 解决方案 在theme目录下备份 _config.yml 为icarus.yml 添加pre commit hook 1234567#!/bin/shif ! diff themes/icarus.yml themes/icarus/_config.yml &amp;&gt; /dev/null ; then cp themes/icarus/_config.yml themes/icarus.yml git add themes/icarus.ymlfi 每次commit的时候都会检查_config.yml是否改变,改变则更新icarus.yml 并add 最终每次commit都可以保证配置文件的更新","link":"/git-pre-commit.html"}],"tags":[],"categories":[{"name":"linux","slug":"linux","link":"/categories/linux/"},{"name":"开发","slug":"开发","link":"/categories/开发/"},{"name":"git","slug":"开发/git","link":"/categories/开发/git/"}]}